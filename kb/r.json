{
    "table": "r",
    "display_name": "Requests (Tests)",
    "alias": "r",
    "description": "Tests In Current",
    "fields": {
        "ralert": "The test has alert related to it (Y\\N) (tinyint)",
        "rappdat": "Approve date (int)",
        "rapptim": "Approve time (smallint)",
        "rautobounds": "The result is in the automatic approval range (int)",
        "rbillcount": "Does The Test Count For Billing (tinyint)",
        "rbounds": "Bounds Of Test (tinyint)",
        "rboundsvalue": "Bounds Value for the Test (nvarchar)",
        "rcommconst": "Count Of Const Comments For The Tests (smallint)",
        "rcommfree": "Count Of Free Comments For The Tests (smallint)",
        "rcommrunconst": "Number of const comments (smallint)",
        "rcommrunfree": "Number of free text comments (smallint)",
        "rcount": "Does The Test Count For Statistics (tinyint)",
        "rdate": "Test Date (int)",
        "rdelta": "Does The Test Had A Delta Flag ? (tinyint)",
        "rdiffdist": "Has the test changed since last distribution ? (tinyint)",
        "rdilution": "Dilution for test (real)",
        "rdynamictime": "Dynamic Time of The Test (smallint)",
        "rflag": "Code of formula for flags (smallint)",
        "rformulainfo": "Not Active (nvarchar)",
        "rgraph": "The Test Has Graph (Y/N) (tinyint)",
        "rhead": "Printing Title For The Test (smallint)",
        "rinprof": "The Code of The Panel That Contains The Test, Or Panel Type If The Test Is A Panel (int)",
        "rinsertdate": "Typing Date Of The Test (Or Generating Date) (int)",
        "rinserttime": "Typing Time Of The Test (Or Generating Time) (smallint)",
        "rinst": "Machine Code Of The Test (smallint)",
        "risprofile": "The test is a profile (Y\\N) (tinyint)",
        "risreject": "Cancellation (tinyint)",
        "risreruns": "The test has reruns defined in the bounds table (tinyint)",
        "rlab": "Lab code (smallint)",
        "rlabel": "Test Label (external Number) (int)",
        "rlaststatus": "Last status of the test (smallint)",
        "rlocation": "Location in tray (smallint)",
        "rmainpanel": "The new field would keep the test main panel (int)",
        "rmnstatus": "No Documentation for this Field (tinyint)",
        "rnumresult": "Numeric Result Of The Test (float)",
        "ronhold": "test mode on-hold (tinyint)",
        "rordno": "Test Number (Internal) (int)",
        "rorigtest": "Test Number (testnum) Of The Original Test That This Test Added From By Reflex (smallint)",
        "roverdue": "whether the request have test time definitions without an action formula and the performance time passed. (tinyint)",
        "rparam": "Parameters For The Test (abcdefghij) (int)",
        "rperformsite": "Performing Site For The Test (int)",
        "rphinst": "Code of the analyzer who did the test (phisically) (smallint)",
        "rphonedist": "What is the phone distribution request Source (manual, abnormal, rejected or Stat.) (int)",
        "rpreresult": "Previous Result for the test (nvarchar)",
        "rprevtestalert": "The result is valid (v flag) (tinyint)",
        "rprint": "Should The Test Be printed ? (tinyint)",
        "rprnsort": "Printing Sort Of The Test (smallint)",
        "rprofnum": "If The Test Is A Part Of A Profile - What Is The Testnum (rtestnum) Of The Profile (smallint)",
        "rqcstatus": "QC status for test (tinyint)",
        "rquantity": "quantity of the test (real)",
        "rrerun": "Number of runs (tinyint)",
        "rresstat": "Result Status (tinyint)",
        "rresult": "Test result (nvarchar)",
        "rrun": "Number of Active Run (smallint)",
        "rsort": "Display sort of the test (smallint)",
        "rstatus": "Test Status (smallint)",
        "rtest": "Test code (int)",
        "rtestnum": "The Number Of The Test In The Whole Order (smallint)",
        "rtray": "Tray Code (int)",
        "rtubenum": "Tube Type Code (smallint)",
        "runique": "Flag to mark the test as unique in the requisition, unless duplicate (such as test in serial time) is allowed. (int)",
        "runits": "Result Unit Code (smallint)",
        "rurgent": "Is the test urgent ? (tinyint)",
        "ruser": "The User Code Of The User That Approved The Test Clinical Approve (smallint)"
    },
    "joins": {
        "c": "r.rtest = c.ccode",
        "rr": [
            "r.rlabel = rr.rrlabel",
            "r.rtest = rr.rrtest"
        ]
    },
    "examples": [
        {
            "query": "SELECT * FROM r(NOLOCK) join c(NOLOCK) on rtest=ccode WHERE r.rdate={test_date} AND r.rordno={order_number} AND r.rprint={print_flag}",
            "description": "Retrieve test requests with test definitions, filtered by date, order number, and print flag",
            "parameters": {
                "test_date": "Test date in YYYYMMDD format (e.g., 20250821)",
                "order_number": "Internal order number (e.g., 116113973)",
                "print_flag": "Print flag value (e.g., 2)"
            }
        },
        {
            "query": "SELECT * FROM o(NOLOCK) join r(NOLOCK) on rordno=oordno AND rdate=odate WHERE (o.odate<={cutoff_date} OR (o.odate={target_date} AND o.otime<={cutoff_time})) AND NOT (o.oordno={excluded_order} AND o.odate={excluded_date}) AND r.rtest={test_code} AND o.opatcode={patient_code} AND o.odate<={max_date} AND o.otype<>{excluded_type} AND r.rdynamictime=0 ORDER BY o.odate DESC",
            "description": "Retrieve orders with test requests using complex date/time filtering, excluding specific orders and order types",
            "parameters": {
                "cutoff_date": "Cutoff date in YYYYMMDD format (e.g., 20250820)",
                "target_date": "Target date for time comparison (e.g., 20250821)",
                "cutoff_time": "Cutoff time in HHMM format (e.g., 104)",
                "excluded_order": "Order number to exclude (e.g., 116084677)",
                "excluded_date": "Date of excluded order (e.g., 20250821)",
                "test_code": "Test code to filter by (e.g., 30907231)",
                "patient_code": "Patient code (e.g., 68522366)",
                "max_date": "Maximum order date (e.g., 20250821)",
                "excluded_type": "Order type to exclude (e.g., 2)"
            }
        },
        {
            "query": "SELECT COUNT(*) AS RET FROM r(NOLOCK) WHERE r.rdate={test_date} AND r.rordno={order_number} AND r.rtubenum={tube_number} AND r.rinst={machine_code}",
            "description": "Count test requests by date, order number, tube number, and machine code",
            "parameters": {
                "test_date": "Test date in YYYYMMDD format (e.g., 20250820)",
                "order_number": "Internal order number (e.g., 116096127)",
                "tube_number": "Tube number (e.g., 3)",
                "machine_code": "Machine code (e.g., 10221)"
            }
        },
        {
            "query": "SELECT * FROM r(NOLOCK) WHERE r.rdate={test_date} AND r.rordno={order_number}",
            "description": "Retrieve all test requests for a specific date and order number",
            "parameters": {
                "test_date": "Test date in YYYYMMDD format (e.g., 20250820)",
                "order_number": "Internal order number (e.g., 116091149)"
            }
        },
        {
            "query": "SELECT * FROM r(NOLOCK) WHERE r.rstatus={status_code} AND r.rdate BETWEEN {start_date} AND {end_date} ORDER BY r.rdate ASC, r.rordno ASC",
            "description": "Retrieve test requests by status within a date range, ordered chronologically",
            "parameters": {
                "status_code": "Test status code (e.g., 1500)",
                "start_date": "Start date in YYYYMMDD format (e.g., 20240101)",
                "end_date": "End date in YYYYMMDD format (e.g., 20241231)"
            }
        },
        {
            "query": "SELECT * FROM r(NOLOCK) WHERE r.rinst={machine_code} AND r.rdate={test_date} AND r.rstatus<>{excluded_status} ORDER BY r.rlabel ASC",
            "description": "Retrieve test requests by machine code for a specific date, excluding certain statuses, ordered by label",
            "parameters": {
                "machine_code": "Machine code (e.g., 10221)",
                "test_date": "Test date in YYYYMMDD format (e.g., 20250820)",
                "excluded_status": "Status to exclude (e.g., 9999)"
            }
        },
        {
            "query": "SELECT * FROM r(NOLOCK) WHERE r.rtest={test_code} AND r.rdate={test_date} AND r.risreject=0 ORDER BY r.rordno ASC, r.rtestnum ASC",
            "description": "Retrieve non-rejected test requests by test code for a specific date, ordered by order and test number",
            "parameters": {
                "test_code": "Test code (e.g., 30907231)",
                "test_date": "Test date in YYYYMMDD format (e.g., 20250821)"
            }
        },
        {
            "query": "SELECT * FROM r(NOLOCK) WHERE r.rurgent=1 AND r.rdate={test_date} AND r.rstatus BETWEEN {min_status} AND {max_status}",
            "description": "Retrieve urgent test requests for a specific date within a status range",
            "parameters": {
                "test_date": "Test date in YYYYMMDD format (e.g., 20250821)",
                "min_status": "Minimum status (e.g., 1000)",
                "max_status": "Maximum status (e.g., 1999)"
            }
        }
    ],
    "Indexes": {
        "INDEX0_UNQ_R": "clustered, unique located on PRIMARY (rordno, rdate, rtestnum)",
        "INDEX1_UNQ_R": "nonclustered, unique located on PRIMARY (rtest, rordno, rdate, runique)",
        "INDEX2_R": "nonclustered located on PRIMARY (rinst, rstatus, rdate, rlabel)",
        "INDEX3_R": "nonclustered located on PRIMARY (rstatus, rinst, rdate, rlabel)",
        "INDEX4_R": "nonclustered located on PRIMARY (rinst, rdate, rlabel)",
        "INDEX5_R": "nonclustered located on PRIMARY (rlabel, rtest, rstatus, rinst)",
        "INDEX6_R": "nonclustered located on PRIMARY (rstatus, rdate, rlabel, rordno, rtubenum, rinst)",
        "INDEX7_R": "nonclustered located on PRIMARY (rlab, rdate, rlabel)",
        "INDEX8_R": "nonclustered located on PRIMARY (rdate, rlabel, rordno, rtubenum)"
    }
}